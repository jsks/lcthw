int:Stores a regular integer, defaulting to 32 bits in size
double:Holds a large floating point number
float:Holds a smaller floating point number
char:Holds a single 1 byte character
void:indicates "no type" and used to say a function returns nothing, or a pointer has no type as in void *thing
enum:Enumerated types, work as integers, convert to integers, but give you symbolic names for sets. Some compilers will warn you when you don't cover all elements of an enum in switch-statements
unsigned:Changes the type so that it does not have negative numbers, giving you a larger upper bound but nothing lower than 0
signed:Gives you negative and positive numbers, but halves your upper bound in exchange for the same lower bound negative
long:Uses a larger storage for the type so that it can hold bigger numbers, usually doubling the current size
short:Uses smaller storage for the type so it stores less, but takes half the space
const:Indicates the variable won't change after ebing intialized
volatile:Indicates that all bets are off, and the compiler should leave this alone and try not to do any fancy optimizations to it. You usually only need this if you're doing really weird stuff to your variables.
register:Forces the compiler to keep this variable in a register, and the compiler can just ignore you. These days compilers are better at figuring out where to put variables, so only use this if you actually can measure it improving the speed.
Order of type casting:long double, double, float, int(but only char and short int), long
int8_t:8 bit signed integer (stdint.h)
uint8_t:8 but unsigned integer (stdint.h)
int16_t:16 bit signed integer (stdint.h)
uint16_t:16 bit unsigned integer (stdint.h)
int32_t:32 bit signed integer (stdint.h)
uint32_t:32 bit unsigned integer (stdint.h)
int64_t:64 bit signed integer (stdint.h)
uint64_t:64 bit unsigned integer (stdint.h)
(binary):The operator has a left and right, X + Y
(unary):The operator is on its own, -X
(prefix):The operator comes before the variable, ++x
(postfix):Usually the same as the (prefix) version, but placing it after gives it a different meaning, X++
(ternary):There's only one of these, so it's actually called the ternary but it means "three operands", X ? Y : Z
():Function call
* (binary):Multiply
/:Divide
+ (binary):addition
+ (unary):positive number
++ (postfix):read, then increment
++ (prefix):increment, then read
-- (postfix):read, then decrement
-- (prefix):decrement, then read
- (binary):subtract
- (unary):negative number
->:struct pointer access
.:struct value access
[]:aray index
sizeof:size of a type or variable
& (unary):Address of
* (unary):Value of
!=:does not equal
<:less than
<=less than or equal
==:equal(not assignment).
>:greater than
>=:greater than or equal
& (binary):Bitwise and
<<:Shift left
>>:Shift right
^:bitwise xor (exclusive or)
|:bitwise or
~:compliment (flips all the bits)
!:not
&&:and
||:or
?:Ternary truth test, read X ? Y : Z as "If X then Y else Z"
=:assign
%=:modulus assign
&=:bitwise and assign
*=:multiply assign
+=:plus assign
-=:minus assign
/=:divide assign
<<=:shift left, assign
>>=:shift right, assign
^=:bitwise xor, assign
|=:bitwise or, assign
do-while:do {...} while (x); First does the code in the block, then tests the X expression before exiting
break:Put this in a loop, and it breaks out ending it early.
continue:Stops the body of a loop and jumps to the test so it can continue
goto:Jumps to a spot in the code where you've placed a label:, and you've been using this in the dbg.h macros to go to the error: label
